import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;


public class OneTrustDataCollector {
    Scanner scanner = new Scanner(System.in);
    private static final String API_KEY = "get_api_key";
    private static final String BASE_URL = "https://api.onetrust.com"; 
    private static final String EXCEL_FILE_PATH = Scanner.getNext(); 

    public static void main(String[] args) {
        try {
            FileInputStream fis = new FileInputStream(EXCEL_FILE_PATH);
            Workbook workbook = new XSSFWorkbook(fis);
            Sheet sheet = workbook.getSheetAt(0); 

            Iterator<Row> rowIterator = sheet.iterator(); 
            while (rowIterator.hasNext()) { 
                Row row = rowIterator.next();
                for (Cell cell : row) {
                    if (isGreyCell(cell)) { 
                        continue;
                    }
                    int col = cell.getColumnIndex();
                    if(col == 3 || col == 7 || col == 8 || col == 12 || col == 13){ 
                        continue;
                    }
                    String geo = getGeoFromColumn(col);
                    String opt = getOptFromColumn(col);
                    String sourceName = getSourceNameFromRow(row); 
                    JSONObject data = fetchData(sourceName, geo, "2024-01-01", "2024-03-31"); 
                    fillDataInCell(cell, data);
                }
            }

            FileOutputStream fos = new FileOutputStream(EXCEL_FILE_PATH);
            workbook.write(fos);
            fos.close();
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private static boolean isGreyCell(Cell cell) {
        CellStyle style = cell.getCellStyle();
        if (style.getFillForegroundColorColor() != null) {
            return style.getFillForegroundColorColor().getARGBHex().equals("FF808080"); 
        }
        return false;
    }


    private static String getGeoFromColumn(int columnIndex) {
       
        switch (columnIndex) {
            case 4: return "EU";
            case 5: return "EU";
            case 6: return "EU";
            case 9: return "USA"; 
            case 10: return "USA"; 
            case 11: return "USA"; 
            default: return "general";
        }
    }

    

    private static String getSourceNameFromRow(Row row) {
        Cell sourceCell = row.getCell(0); 
        return sourceCell.getStringCellValue();
    }


    private static JSONObject fetchData(String sourceName, String geo, String startDate, String endDate) {

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            String endpoint = String.format("/data?sourceName=%s&geo=%s&startDate=%s", sourceName, geo, startDate, endDate); 
            HttpGet request = new HttpGet(BASE_URL + endpoint);
            request.addHeader("Authorization", "Bearer " + API_KEY); 
            request.addHeader("Content-Type", "application/json");

            HttpResponse response = httpClient.execute(request);
            if (response.getStatusLine().getStatusCode() == 200) { 
                String jsonResponse = EntityUtils.toString(response.getEntity()); 
                return new JSONObject(jsonResponse);
            } else {
                System.err.println("Failed to fetch data: " + response.getStatusLine().getStatusCode());
                return null;
            }

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }

    }


    private static void fillDataInCell(Cell cell, JSONObject data) {  
       if (data != null) {

        try {
            double optIn = data.getDouble("optIn");
            double optOut = data.getDouble("optOut");
            double notGiven = data.getDouble("notGiven");

           
            switch (cell.getColumnIndex()) {
                case 4: // Column for optIn
                    cell.setCellValue(optIn);
                    break;
                case 5: // Column for optOut
                    cell.setCellValue(notGiven);
                    break;
                case 6: // Column for notGiven
                    cell.setCellValue(optOut);
                    break;
                case 9: // Column for optIn
                    cell.setCellValue(optIn);
                    break;
                case 10: // Column for optOut
                    cell.setCellValue(notGiven);
                    break;
                case 11: // Column for notGiven
                    cell.setCellValue(optOut);
                    break;
                default:
                    System.err.println("Unexpected column index: " + cell.getColumnIndex());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    }


}

